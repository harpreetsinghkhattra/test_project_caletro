#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lawyerup_server:server');
var http = require('http');
import SocketIO from 'socket.io';
import { Operations } from '../operations/operations.js';
import { CommonJs } from '../operations/common.js';

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
let io = SocketIO(server);
var CommonJsInstance = new CommonJs();

/**
 * --------------------------------------------------------------------------------------------
 * --------------------------------------------------------------------------------------------
 * --------------------------------------------------------------------------------------------
 * Socekt implementation start
 * --------------------------------------------------------------------------------------------
 * --------------------------------------------------------------------------------------------
 * --------------------------------------------------------------------------------------------
 */
var clients = [];
io.sockets.on('connection', function (socket) {

  /**
   * On user connection
   */
  socket.on('user connection', (data) => {
    socket.id = data.user;
    clients.push(socket.id);
    clients = Array.from(new Set(clients));
    console.log(data);
    io.emit('update users', { connectedUsers: clients });
  });

  socket.on('getAllUnreadClientBookings', (data) => {
    CommonJs.validate("getAllUnreadClientBookings", data, (status, emptyKeys) => {
      if (status) {
        console.log(data);
        Operations.getUnreadBookings(data, (status, response) => io.emit('get all unread client bookings data', { code: 200, message: CommonJsInstance.SUCCESS, data: response, error: false, clientId: data.clientId }));
      } else io.emit('get all unread client bookings data', { code: 400, message: CommonJsInstance.VALIDATE_ERROR, data: emptyKeys, error: true, clientId: data.clientId });
    });
  });

  socket.on('disconnect', function () {
    if (clients.indexOf(socket.id) > -1) {
      clients.splice(clients.indexOf(socket.id), 1);
    }
    io.emit('users disconnected', { connectedUser: socket.id });
  });
});

/**
 * --------------------------------------------------------------------------------------------
 * --------------------------------------------------------------------------------------------
 * --------------------------------------------------------------------------------------------
 * Socket End
 * --------------------------------------------------------------------------------------------
 * --------------------------------------------------------------------------------------------
 * --------------------------------------------------------------------------------------------
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
